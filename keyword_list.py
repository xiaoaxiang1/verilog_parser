keyword_list = [
    "always",
    "ifnone",
    "rnmos",
    "and",
    "incdir",
    "rpmos",
    "assign",
    "include",
    "rtran",
    "automatic",
    "initial",
    "rtranif0",
    "begin",
    "inout",
    "rtranif1",
    "buf",
    "input",
    "scalared",
    "bufif0",
    "instance",
    "showcancelled",
    "bufif1",
    "integer",
    "signed",
    "case",
    "join",
    "small",
    "casex",
    "large",
    "specify",
    "casez",
    "liblist",
    "specparam",
    "cell",
    "library",
    "strong0",
    "cmos",
    "localparam",
    "strong1",
    "config",
    "macromodule",
    "supply0",
    "deassign",
    "medium",
    "supply1",
    "default",
    "module",
    "table",
    "defparam",
    "nand",
    "task",
    "design",
    "negedge",
    "time",
    "disable",
    "nmos",
    "tran",
    "edge",
    "nor",
    "tranif0",
    "else",
    "noshowcancelled",
    "tranif1",
    "end",
    "not",
    "tri",
    "endcase",
    "notif0",
    "tri0",
    "endconfig",
    "notif1",
    "tri1",
    "endfunction",
    "or",
    "triand",
    "endgenerate",
    "output",
    "trior",
    "endmodule",
    "parameter",
    "trireg",
    "endprimitive",
    "pmos",
    "unsigned1",
    "endspecify",
    "posedge",
    "use",
    "endtable",
    "primitive",
    "uwire",
    "endtask",
    "pull0",
    "vectored",
    "event",
    "pull1",
    "wait",
    "for",
    "pulldown",
    "wand",
    "force",
    "pullup",
    "weak0",
    "forever",
    "pulsestyle_onevent",
    "weak1",
    "fork",
    "pulsestyle_ondetect",
    "while",
    "function",
    "rcmos",
    "wire",
    "generate",
    "real",
    "wor",
    "genvar",
    "realtime",
    "xnor",
    "highz0",
    "reg",
    "xor",
    "highz1",
    "release",
    "if",
    "repeat",
]


with open("./grammar.py", "r") as f:
    grammar_line_list = f.readlines()

new_grammar_line_list = []
for i, line in enumerate(grammar_line_list):
    if i == 0:
        new_grammar_line_list.append(line)
        continue

    if line.startswith("# A."):
        new_grammar_line_list.append(line)
        continue
    
    text_list = line.strip().split()
    print(text_list)
    text_list = [f'"{text}"' if text in keyword_list else text for text in text_list]
    line = " ".join(text_list)
    line = line+"\n"
    new_grammar_line_list.append(line)

with open("./new_grammar.py", "w+") as f:
    f.writelines(new_grammar_line_list)